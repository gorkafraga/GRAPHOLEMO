seqMatch <- rep(0,length(seqSound))
for (i in 1:length(seqMatch)){
if (seqSound[i]==1) { seqMatch[i] <- 11      # assign predetermined code depending on the sound in a given trial
}else if(seqSound[i]==2) {seqMatch[i] <- 13
}else if(seqSound[i]==3) {seqMatch[i] <- 21
}else if(seqSound[i]==4) {seqMatch[i] <- 22
}else if(seqSound[i]==5) {seqMatch[i] <- 32
}
} # Note: table(seqMatch) to count frequencies
## Mismatched pairs sequence
#-----------------------------
allcombis <- expand.grid(symbol,marker) # all possible combinations between symbols and markers
allcombis <-  as.numeric(paste(allcombis[,1],allcombis[,2],sep="")) # as 2 digits number vector
seqMissmatch <- rep(allcombis,(nRepMatches*nUniqueMatches)/length(allcombis))
if(length(seqMissmatch)!=length(seqSound)) {                 }
seqMissmatch <- c(seqMissmatch,allcombis[1:(length(seqSound)-length(seqMissmatch))])
c <- 0
while (length(which(diff(seqMissmatch)==0))>0 || length(which((seqMatch-seqMissmatch)==0))>0 || length(which(as.numeric(substr(seqMatch,2,2))+as.numeric(substr(seqMissmatch,2,2))==6))>0 ) {
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seq <-cbind(seqSound,seqMatch,seqMissmatch)
## COUNT specific type of trials
#-----------------------------------------
which(as.numeric(substr(seqMatch,2,2))-as.numeric(substr(seqMissmatch,2,2))==0)
length(which(as.numeric(substr(seqMatch,2,2))-as.numeric(substr(seqMissmatch,2,2))==0))
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
marker <- c(1:3) # 1 = extends phoneme 2 = adds phoneme 'sch'. 3 = changes phoneme
sound  <- c(1:5)
symbol <- c(1:3)
nUniqueMatches <- 5
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
##  Matched pairs sequence
#-----------------------------
seqMatch <- rep(0,length(seqSound))
for (i in 1:length(seqMatch)){
if (seqSound[i]==1) { seqMatch[i] <- 11      # assign predetermined code depending on the sound in a given trial
}else if(seqSound[i]==2) {seqMatch[i] <- 13
}else if(seqSound[i]==3) {seqMatch[i] <- 21
}else if(seqSound[i]==4) {seqMatch[i] <- 22
}else if(seqSound[i]==5) {seqMatch[i] <- 32
}
} # Note: table(seqMatch) to count frequencies
## Mismatched pairs sequence
#-----------------------------
allcombis <- expand.grid(symbol,marker) # all possible combinations between symbols and markers
allcombis <-  as.numeric(paste(allcombis[,1],allcombis[,2],sep="")) # as 2 digits number vector
seqMissmatch <- rep(allcombis,(nRepMatches*nUniqueMatches)/length(allcombis))
if(length(seqMissmatch)!=length(seqSound)) {                 }
seqMissmatch <- c(seqMissmatch,allcombis[1:(length(seqSound)-length(seqMissmatch))])
c <- 0
while (length(which(diff(seqMissmatch)==0))>0 || length(which((seqMatch-seqMissmatch)==0))>0 || length(which(as.numeric(substr(seqMatch,2,2))+as.numeric(substr(seqMissmatch,2,2))==6))>0 ) {
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seq <-cbind(seqSound,seqMatch,seqMissmatch)
## Combine sequences to define each trial
#-----------------------------------------
seq
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
marker <- c(1:3) # 1 = extends phoneme 2 = adds phoneme 'sch'. 3 = changes phoneme
sound  <- c(1:5)
symbol <- c(1:3)
nUniqueMatches <- 5
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
##  Matched pairs sequence
#-----------------------------
seqMatch <- rep(0,length(seqSound))
for (i in 1:length(seqMatch)){
if (seqSound[i]==1) { seqMatch[i] <- 11      # assign predetermined code depending on the sound in a given trial
}else if(seqSound[i]==2) {seqMatch[i] <- 13
}else if(seqSound[i]==3) {seqMatch[i] <- 21
}else if(seqSound[i]==4) {seqMatch[i] <- 22
}else if(seqSound[i]==5) {seqMatch[i] <- 32
}
} # Note: table(seqMatch) to count frequencies
## Mismatched pairs sequence
#-----------------------------
allcombis <- expand.grid(symbol,marker) # all possible combinations between symbols and markers
allcombis <-  as.numeric(paste(allcombis[,1],allcombis[,2],sep="")) # as 2 digits number vector
seqMissmatch <- rep(allcombis,(nRepMatches*nUniqueMatches)/length(allcombis))
if(length(seqMissmatch)!=length(seqSound)) {                 }
seqMissmatch <- c(seqMissmatch,allcombis[1:(length(seqSound)-length(seqMissmatch))])
c <- 0
while (length(which(diff(seqMissmatch)==0))>0 || length(which((seqMatch-seqMissmatch)==0))>0 || length(which(as.numeric(substr(seqMatch,2,2))+as.numeric(substr(seqMissmatch,2,2))==6))>0 ) {
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seq <-cbind(seqSound,seqMatch,seqMissmatch)
## COUNT specific type of trials
#-----------------------------------------
which(as.numeric(substr(seqMatch,2,2))-as.numeric(substr(seqMissmatch,2,2))==0)
length(which(as.numeric(substr(seqMatch,2,2))-as.numeric(substr(seqMissmatch,2,2))==0))
seq
table(seqMissmatch)
c(21,13,21,22,11,21,32,13,11,13,32,11,21,13,21,32,11,32,11,22,32,11,13,22,21,11,13,32,22,13,32,22,11,32,22,21,22,21,13,22)
seqmatch <- c(21,13,21,22,11,21,32,13,11,13,32,11,21,13,21,32,11,32,11,22,32,11,13,22,21,11,13,32,22,13,32,22,11,32,22,21,22,21,13,22)
table(seqmatch)
(12,32,11,23,22,33,31,21,33,11,21,23,22,32,13,12,21,31,13,23,12,23,21,33,11,22,31,13,33,31,12,32,12,22,21,11,32,11,31,13
(12,32,11,23,22,33,31,21,33,11,21,23,22,32,13,12,21,31,13,23,12,23,21,33,11,22,31,13,33,31,12,32,12,22,21,11,32,11,31,13)
mismatch c(12,32,11,23,22,33,31,21,33,11,21,23,22,32,13,12,21,31,13,23,12,23,21,33,11,22,31,13,33,31,12,32,12,22,21,11,32,11,31,13)
mismatch <- c(12,32,11,23,22,33,31,21,33,11,21,23,22,32,13,12,21,31,13,23,12,23,21,33,11,22,31,13,33,31,12,32,12,22,21,11,32,11,31,13)
table(mismatch)
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
sound  <- c(1:6)
symbol <- c(1:3)
nUniqueMatches <- length(sound)
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
sound  <- c(1:6)
symbol <- c(1:6)
nUniqueMatches <- length(sound)
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
seqSound
##  Matched pairs sequence
#-----------------------------
seqMatch <- rep(0,length(seqSound))
for (i in 1:length(seqMatch)){
if (seqSound[i]==1) { seqMatch[i] <- 1      # assign predetermined code (1 number is symbol, 2 number is marker) depending on the sound in a given trial
}else if(seqSound[i]==2) {seqMatch[i] <- 2
}else if(seqSound[i]==3) {seqMatch[i] <- 3
}else if(seqSound[i]==4) {seqMatch[i] <- 4
}else if(seqSound[i]==5) {seqMatch[i] <- 5
}else if(seqSound[i]==6) {seqMatch[i] <- 6
}
}
seqMatch
seqSound
## Mismatched pairs sequence
#-----------------------------
allcombis <- expand.grid(symbol,marker) # all possible combinations between symbols and markers
seqMissmatch <- seqMatch
seqMatch
seqMissmatch <- seqMatch
sample(seqMissmatch)
seqMissmatch-seqMatch
seqMissmatch <- sample (seqMissmatch)
seqMissmatch-seqM
seqMissmatch-seqMatch
which(seqMissmatch-seqMatch==0
)
which(seqMissmatch-seqMatch==0)
length(which(seqMissmatch-seqMatch==0))
c <- 0
# Shuffle the missmatch pairs if (1) There are two consecutive repetions OR (2) the pair in the missmatch in a given trial is the same as the one in the match array
while (length(which(seqMissmatch-seqMatch==0))>0) { #
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
cbind(seqMatch,seqMissmatch)
#-----------------------------
seqMatch <- seqSound #matching symbols have same code as sounds
seqMissmatch <- sample(seqMatch)
c <- 0
while (length(which(seqMissmatch-seqMatch==0))>0 & length(which(diff(seqSound)==0))>0) { #
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
cbind(seqMatch,seqMissmatch)
seqMatch <- seqSound #matching symbols have same code as sounds
seqMissmatch <- sample(seqMatch)
c <- 0
while (length(which(seqMissmatch-seqMatch==0))>0 & length(which(diff(seqMissmatch)==0))>0) { #
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seqMissmatch
cbind(seqMatch,seqMissmatch)
seqMatch <- seqSound #matching symbols have same code as sounds
seqMissmatch <- sample(seqMatch)
c <- 0
while (length(which(seqMissmatch-seqMatch==0))>0 | length(which(diff(seqMissmatch)==0))>0) { #
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seqMissmatch
diff(seqMissmatch)
seqMatch <- seqSound #matching symbols have same code as sounds
seqMissmatch <- sample(seqMatch)
c <- 0
while (length(which(c(seqMissmatch-seqMatch)==0))>0 | length(which(diff(seqMissmatch)==0))>0) { #
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seqMissmatch
cbind(seqMissmatch,seqMatch)
#------------------------------------------------------------
seq <-cbind(seqSound,seqMatch,seqMissmatch)
#------------------------------------------------------------
seq <-cbind(seqSound,seqMatch,seqMissmatch)
seq
paste(seqSound,collapse=",")
paste(seqMatch,collapse=",")
paste(seqMissmatch,collapse=",")
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
sound  <- c(1:6)
symbol <- c(1:6)
nUniqueMatches <- length(sound)
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
## Symbol sequences
#-----------------------------
seqMatch <- seqSound #matching symbols have same code as sounds
seqMissmatch <- sample(seqMatch)
c <- 0
while (length(which(c(seqMissmatch-seqMatch)==0))>0 | length(which(diff(seqMissmatch)==0))>0) { # constrains:different from the Match in a given trial and  no consec repetitions
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
#------------------------------------------------------------
seq <-cbind(seqSound,seqMatch,seqMissmatch)
seq
paste(seqMatch,collapse=",")
paste(seqMissmatch,collapse=",")
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
sound  <- c(1:6)
symbol <- c(1:6)
nUniqueMatches <- length(sound)
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
## Symbol sequences
#-----------------------------
seqMatch <- seqSound #matching symbols have same code as sounds
seqMissmatch <- sample(seqMatch)
c <- 0
while (length(which(c(seqMissmatch-seqMatch)==0))>0 | length(which(diff(seqMissmatch)==0))>0) { # constrains:different from the Match in a given trial and  no consec repetitions
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
#------------------------------------------------------------
seq <-cbind(seqSound,seqMatch,seqMissmatch)
paste(seqMatch,collapse=",")
paste(seqMissmatch,collapse=",")
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
sound  <- c(1:6)
symbol <- c(1:6)
nUniqueMatches <- length(sound)
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
## Symbol sequences
#-----------------------------
seqMatch <- seqSound #matching symbols have same code as sounds
seqMissmatch <- sample(seqMatch)
c <- 0
while (length(which(c(seqMissmatch-seqMatch)==0))>0 | length(which(diff(seqMissmatch)==0))>0) { # constrains:different from the Match in a given trial and  no consec repetitions
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
#------------------------------------------------------------
seq <-cbind(seqSound,seqMatch,seqMissmatch)
paste(seqMatch,collapse=",")
paste(seqMissmatch,collapse=",")
norm(1,2)
rnorm(n, mean = 0, sd = 1)
rnorm(58, mean = 2500, sd = 500)
rnorm(48, mean = 2500, sd = 500)
mean(rnorm(48, mean = 2500, sd = 500))
paste(rnorm(48, mean = 2500, sd = 500),collapse=",")
paste(round(rnorm(48, mean = 2500, sd = 500),2),collapse=",")
paste(round(rnorm(48, mean = 2500, sd = 500),0),collapse=",")
paste(round(rnorm(48, mean = 2000, sd = 500),0),collapse=",")
paste(round(rnorm(48, mean = 2000, sd = 500),0),collapse=",")
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
marker <- c(1:3) # 1 = extends phoneme 2 = adds phoneme 'sch'. 3 = changes phoneme
sound  <- c(1:6)
symbol <- c(1:3)
nUniqueMatches <- length(sound)
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
##  Matched pairs sequence
#-----------------------------
seqMatch <- rep(0,length(seqSound))
for (i in 1:length(seqMatch)){
if (seqSound[i]==1) { seqMatch[i] <- 11      # assign predetermined code (1 number is symbol, 2 number is marker) depending on the sound in a given trial
}else if(seqSound[i]==2) {seqMatch[i] <- 13
}else if(seqSound[i]==3) {seqMatch[i] <- 21
}else if(seqSound[i]==4) {seqMatch[i] <- 22
}else if(seqSound[i]==5) {seqMatch[i] <- 32
}else if(seqSound[i]==6) {seqMatch[i] <- 33
}
}
# Note: use the function "table(seqMatch)" to count frequencies
## Mismatched pairs sequence
#-----------------------------
allcombis <- expand.grid(symbol,marker) # all possible combinations between symbols and markers
allcombis <-  as.numeric(paste(allcombis[,1],allcombis[,2],sep="")) # as 2 digits number vector
seqMissmatch <- rep(allcombis,(nRepMatches*nUniqueMatches)/length(allcombis)) #repeat all possible combinations until completing the number of trials in sequence
if(length(seqMissmatch)!=length(seqSound)) {                 }
seqMissmatch <- c(seqMissmatch,allcombis[1:(length(seqSound)-length(seqMissmatch))])  #repeat some combinations if it has too little n trials, until seqmissmatch has same length as seqMatch
c <- 0
# Shuffle the missmatch pairs if (1) There are two consecutive repetions OR (2) the pair in the missmatch in a given trial is the same as the one in the match array
while (length(which(diff(seqMissmatch)==0))>0 || length(which((seqMatch-seqMissmatch)==0))>0) { #
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seq <-cbind(seqSound,seqMatch,seqMissmatch)
## COUNT specific type of trials
#-----------------------------------------
sameSymbol <-  which(as.numeric(substr(seqMatch,1,1))-as.numeric(substr(seqMissmatch,1,1))==0)
sameMarker <-  which(as.numeric(substr(seqMatch,2,2))-as.numeric(substr(seqMissmatch,2,2))==0)
seq
paste(seqSound,collapse=", ")
paste(seqMatch, collapse=", ")
paste(seqMatch, collapse=",")
paste(seqMissmatch, collapse=",")
paste(seqSound,collapse=", ")
paste(seqMatch,collapse=", ")
paste(seqMatch,collapse=",")
paste(seqMissmatch,collapse=",")
paste(seqSound,collapse=", ")
paste(seqMatch,collapse=",")
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
marker <- c(1:3) # 1 = extends phoneme 2 = adds phoneme 'sch'. 3 = changes phoneme
sound  <- c(1:6)
symbol <- c(1:3)
nUniqueMatches <- length(sound)
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
##  Matched pairs sequence
#-----------------------------
seqMatch <- rep(0,length(seqSound))
for (i in 1:length(seqMatch)){
if (seqSound[i]==1) { seqMatch[i] <- 11      # assign predetermined code (1 number is symbol, 2 number is marker) depending on the sound in a given trial
}else if(seqSound[i]==2) {seqMatch[i] <- 13
}else if(seqSound[i]==3) {seqMatch[i] <- 21
}else if(seqSound[i]==4) {seqMatch[i] <- 22
}else if(seqSound[i]==5) {seqMatch[i] <- 32
}else if(seqSound[i]==6) {seqMatch[i] <- 33
}
}
# Note: use the function "table(seqMatch)" to count frequencies
## Mismatched pairs sequence
#-----------------------------
allcombis <- expand.grid(symbol,marker) # all possible combinations between symbols and markers
allcombis <-  as.numeric(paste(allcombis[,1],allcombis[,2],sep="")) # as 2 digits number vector
seqMissmatch <- rep(allcombis,(nRepMatches*nUniqueMatches)/length(allcombis)) #repeat all possible combinations until completing the number of trials in sequence
if(length(seqMissmatch)!=length(seqSound)) {                 }
seqMissmatch <- c(seqMissmatch,allcombis[1:(length(seqSound)-length(seqMissmatch))])  #repeat some combinations if it has too little n trials, until seqmissmatch has same length as seqMatch
c <- 0
# Shuffle the missmatch pairs if (1) There are two consecutive repetions OR (2) the pair in the missmatch in a given trial is the same as the one in the match array
while (length(which(diff(seqMissmatch)==0))>0 || length(which((seqMatch-seqMissmatch)==0))>0) { #
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seq <-cbind(seqSound,seqMatch,seqMissmatch)
## COUNT specific type of trials
#-----------------------------------------
sameSymbol <-  which(as.numeric(substr(seqMatch,1,1))-as.numeric(substr(seqMissmatch,1,1))==0)
sameMarker <-  which(as.numeric(substr(seqMatch,2,2))-as.numeric(substr(seqMissmatch,2,2))==0)
paste(seqSound,collapse=", ")
paste(seqMatch,collapse=", ")
paste(seqMatch,collapse=",")
paste(seqMissmatch,collapse=",")
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra")
lapply(Packages, require, character.only = TRUE)
#################################
# variables
marker <- c(1:3) # 1 = extends phoneme 2 = adds phoneme 'sch'. 3 = changes phoneme
sound  <- c(1:6)
symbol <- c(1:3)
nUniqueMatches <- length(sound)
nRepMatches <- 8
## Sound sequence  (avoid consecutive repetition)
# ----------------------------
seqSound <- rep(sound,nRepMatches)
seqSound <- sample(seqSound)
while (length(which(diff(seqSound)==0))>0){
seqSound<- sample(seqSound)  #shuffle if there are consec repetitions
}
##  Matched pairs sequence
#-----------------------------
seqMatch <- rep(0,length(seqSound))
for (i in 1:length(seqMatch)){
if (seqSound[i]==1) { seqMatch[i] <- 11      # assign predetermined code (1 number is symbol, 2 number is marker) depending on the sound in a given trial
}else if(seqSound[i]==2) {seqMatch[i] <- 13
}else if(seqSound[i]==3) {seqMatch[i] <- 21
}else if(seqSound[i]==4) {seqMatch[i] <- 22
}else if(seqSound[i]==5) {seqMatch[i] <- 32
}else if(seqSound[i]==6) {seqMatch[i] <- 33
}
}
# Note: use the function "table(seqMatch)" to count frequencies
## Mismatched pairs sequence
#-----------------------------
allcombis <- expand.grid(symbol,marker) # all possible combinations between symbols and markers
allcombis <-  as.numeric(paste(allcombis[,1],allcombis[,2],sep="")) # as 2 digits number vector
seqMissmatch <- rep(allcombis,(nRepMatches*nUniqueMatches)/length(allcombis)) #repeat all possible combinations until completing the number of trials in sequence
if(length(seqMissmatch)!=length(seqSound)) {                 }
seqMissmatch <- c(seqMissmatch,allcombis[1:(length(seqSound)-length(seqMissmatch))])  #repeat some combinations if it has too little n trials, until seqmissmatch has same length as seqMatch
c <- 0
# Shuffle the missmatch pairs if (1) There are two consecutive repetions OR (2) the pair in the missmatch in a given trial is the same as the one in the match array
while (length(which(diff(seqMissmatch)==0))>0 || length(which((seqMatch-seqMissmatch)==0))>0) { #
c <- c+ 1
print(c + 1)
seqMissmatch <- sample(seqMissmatch)
}
seq <-cbind(seqSound,seqMatch,seqMissmatch)
## COUNT specific type of trials
#-----------------------------------------
sameSymbol <-  which(as.numeric(substr(seqMatch,1,1))-as.numeric(substr(seqMissmatch,1,1))==0)
sameMarker <-  which(as.numeric(substr(seqMatch,2,2))-as.numeric(substr(seqMissmatch,2,2))==0)
paste(seqSound,collapse=", ")
paste(seqMatch,collapse=",")
paste(seqMissmatch, collapse=",")
