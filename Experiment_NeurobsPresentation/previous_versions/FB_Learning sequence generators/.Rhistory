# Prepare data set  -----------------------------------------------------------------------------------------------
D<-AllD[which(AllD$condition %in% c("Digits","New")),]
D$subjID <- as.factor(D$subjID)
D$time <- D$time-52 # TIMING CORRECTION!
# recode subject variable
if (targetTimePoint == "T2") {
targetGroup <- gsub("VP_","VP2",targetGroup)
} else if (targetTimePoint == "T1"){
targetGroup <-gsub("VP_","VP1",targetGroup)
} else if (targetTimePoint == "T3"){
targetGroup <- gsub("VP_","VP3",targetGroup)
} else if (targetTimePoint == "T5"){
targetGroup <- gsub("VP_","VP5",targetGroup)
} else if (targetTimePoint == "T6"){
targetGroup <- gsub("VP_","VP6",targetGroup)
}
# Select subject group
D <- D[which(D$subjID %in% targetGroup),]
D$subjID <- as.factor(D$subjID)
# Consistency Check: do subjects have both conditions? -----------------------------------------------------------------------------
subjects <- sort(unique(D$subjID))
for (i in 1:length(subjects)){
if (length(which(D$subjID== subjects[i])) ==  (length(unique(D$condition))*length(unique(D$time)))){
print(paste(subjects[i],' is OK',sep=""))
}else {print(paste(subjects[i],' WRONG',sep=""))}
}
# Statistics -------------------------------------------------------------------------------------------------------------
colnames(D)[which(colnames(D)==electrode)] <- "amplitude"
times <- unique(D$time)
if (electrode!="GFP"){
runningT <- D %>%
split(.$time) %>%
map(~t.test(amplitude~condition, paired = TRUE, data = .))
#map(~t.test(as.formula(paste("amplitude~", targetFactor,sep="")), paired = TRUE, data = .))
pvals <- data.frame(time = times, p.value = map_dbl(runningT,"p.value"))
# several correction to pvalues
pvals$crit <- 0 + (pvals$p.value <= .05)
pvals$crit[pvals$crit == 0] <- NA
pvals$critBon <- 0+ (p.adjust(pvals$p.value,"bonferroni") <= .05)
pvals$critBon[pvals$critBon == 0] <- NA
pvals$critHolm <- 0 + (p.adjust(pvals$p.value, "holm") <= .05)
pvals$critHolm[pvals$critHolm == 0] <- NA
pvals$critFDR <- 0+(p.adjust(pvals$p.value, "fdr") <= .05)
pvals$critFDR[pvals$critFDR == 0] <- NA
}
# -------------------------------------------------------------------------------------------------------------------
# Calculate and plot GFP of data averaged across subjects and conditions
# -------------------------------------------------------------------------------------------------------------------
D$time <- as.factor(D$time)
scalpChansIdx <- grep(pattern = "E",colnames(D)) #be sure only scalp electrodes labels begin with "E-"
#GFP from Grand Average accross condition
chanList <- list() # list that will contain the average accross subjects
for (ch in 1:length(scalpChansIdx)){
chanList[[ch]] <- summarySEwithin(D,measurevar=colnames(D)[scalpChansIdx[ch]], withinvars=c("time"),idvar = "subjID") #mean of both conditions across subjects
}
chanMeans <- sapply(chanList,"[[",3)
#GFP digits
chanList_DIG <- list() # list that will contain the average accross subjects
for (ch in 1:length(scalpChansIdx)){
chanList_DIG[[ch]] <- summarySEwithin(subset(D,condition=="Digits"),measurevar=colnames(D)[scalpChansIdx[ch]], withinvars=c("time"),idvar = "subjID") #mean of both conditions across subjects
}
chanMeans_DIG <- sapply(chanList_DIG,"[[",3)
#GFP false fonts
chanList_NEW <- list() # list that will contain the average accross subjects
for (ch in 1:length(scalpChansIdx)){
chanList_NEW[[ch]] <- summarySEwithin(subset(D,condition=="New"),measurevar=colnames(D)[scalpChansIdx[ch]], withinvars=c("time"),idvar = "subjID") #mean of both conditions across subjects
}
chanMeans_NEW <- sapply(chanList_NEW,"[[",3)
# Gather both gfp from total average and per condition
gfp <- c(apply(chanMeans,1,sd),apply(chanMeans_DIG,1,sd),apply(chanMeans_NEW,1,sd))
gfp2plot<- cbind(as.data.frame(gfp),as.data.frame(c(rep(times,3))),c(rep("Pooled",length(times)),rep("DIG",length(times)),rep("NEW",length(times))))
colnames(gfp2plot)<- c("gfp","times","condition")
gfp2plot$condition <- as.factor(gfp2plot$condition)
# extract peak information (eyeball the data to select the range so it is not confounded with a local maxima)
tmp <- gfp2plot[which(gfp2plot$times %in% c(200:250) & gfp2plot$condition=="Pooled"),]
seg2time <- tmp$times[which(tmp$gfp==max(tmp$gfp))]
# Read TANOVA info
# -------------------------------------------------------------------------------------------------------------------
tanovaPs <- read.csv(paste(tanovainput,"/",dir(tanovainput,tanovafilepattern),sep=""),sep=" ",header=FALSE)[,4]
tano2plot <- as.data.frame(cbind(tanovaPs,times))
colnames(tano2plot) <- c("p","time")
# Select  only time window : change other p values to 99 so we only see tanova results for the N1 time window
tmp <- rep(99,length(tano2plot$p))
tmp[which(tano2plot$time %in% seq(N1window[1],N1window[2]))] <-tano2plot$p[which(tano2plot$time %in% seq(N1window[1],N1window[2]))]
tano2plot$p <- tmp
tano2plot_trim <- tano2plot[which(tano2plot$time %in% seq(N1window[1],N1window[2])) ,]
# -------------------------------------------------------------------------------------------------------------------
#  PLOT
# -------------------------------------------------------------------------------------------------------------------
xlims <- c(0,900)
ylims <- c(0,4)
ylimsep <- 1
wesandersonPalette <- c("black","#cc2a1a","gray0","gray")
cols <- wesandersonPalette
tPlot <-
ggplot(data=tano2plot_trim,aes(x=tano2plot_trim$time,y=3,width=1)) +
#geom_raster(aes_string(x="time",fill="p",y=0.05),height=.2,position="identity",interpolate=TRUE) +
#geom_rect(aes_string(xmin = N1window[1]-1.3,xmax=N1window[2]+1.3, ymin=0.1,ymax=0.2),color="black",size=1) +
geom_rect(aes_string(xmin ="time",xmax=N1window[2], ymin=0.1,ymax=0.25,fill="p")) +
annotate("rect",xmin=N1window[1],xmax=N1window[2], ymin=0.1,ymax=0.25,color="black",size=.75,alpha=0.01) +
#geom_raster(aes(fill=tano2plot$ps),interpolate=TRUE)+
#scale_fill_gradient(aes(color=ps),limits=c(0.0001,0.05),low = "Orange",high = "white",na.value = "white") +
scale_fill_gradientn(aes_string(fill="p"),space="Lab",limits=c(0.000001,.05),colours= heat.colors(50,alpha = 1)[20:40], na.value = "white",
guide = guide_colorbar(title = paste("p values ","\nN1 TANOVA",sep=""),frame.colour = "black", ticks.colour = "black",barwidth = 1,face="italic")) +
#GFP
geom_line(data =gfp2plot,aes(x=times,y=gfp,alpha=condition,size=condition,linetype=condition,color=condition)) +
scale_linetype_manual(values=c("longdash","longdash","solid")) +
scale_alpha_manual(values=c(.75,.75,1)) +
scale_color_manual(values=cols) +
scale_size_manual(values=c(1,1,1.5)) +
geom_vline(xintercept = 0,linetype = "solid",alpha=.6,size=.1) +
theme_classic()  +
scale_colour_manual(values = cols ) +
expand_limits(x = 0, y = 0) +
labs(x="Time",y="GFP", title ="TANOVA: digits vs false font",caption = paste("S2: ",seg2time," ms; ",length(unique(D$subjID)) ," subjects",sep=""), sep="") +
#scale_y_continuous(breaks = (seq(ylims[1],ylims[2],ylimsep)), labels= (seq(ylims[1],ylims[2],ylimsep))) +
scale_y_continuous(breaks = seq(ylims[1],ylims[2],1),expand = c(0, 0)) +
scale_x_continuous(breaks = seq(xlims[1],xlims[2],100), expand = c(0, 0),labels= (seq(xlims[1],xlims[2],100))) +
theme (axis.line.y = element_line(color = "black", size = .5, linetype = "solid"),
axis.line.x = element_line(color ="black", size = .5, linetype = "solid"),
axis.text.x = element_text(size=12,color="black"),
axis.text.y = element_text(size=12,color="black"),
axis.title.x = element_text(size=14,color="black",face = "bold"),
axis.title.y = element_text(size=14,color="black",face = "bold"))
#save
outputfilenamegfp <- paste("Plot_TANOVAGFP_",gsub("_","",comparisons),"(",paste(length(unique(D$subjID)),"ss)",sep=""),".tiff", sep="")
outputfilenamegfp <- gsub(".tiff",paste("_",gsub("_","",substr(tanovafilepattern,2,nchar(tanovafilepattern)-4)),".tiff",sep=""),outputfilenamegfp)
print(tPlot)
setwd(tanovainput)
ggsave(outputfilenamegfp,tPlot,width = 150, height = 100, dpi=300, units = "mm")
setwd(dirinput)
# plot (peak latency in caption)
rm(list=ls(all=TRUE)) # remove all variables (!)
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('MasterAK_beh_erp.sav')
colnames(dat)
grep(pattern = colnames(dat)
gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LPamp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat)
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat)
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
dat
colnames(dat)
write_sav(dat,'N:/Users/gfraga/_Misc/ALINE/MasterAK_beh_erps.sav')
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('original_MasterAK_beh_erp.sav')
colnames(dat) <- gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat)
colnames(dat) <- gsub(pattern = 'P2_LOT9', replacement = 'LOT9P2',colnames(dat))
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('original_MasterAK_beh_erp.sav')
colnames(dat) <- gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_LOT9', replacement = 'LOT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_ROT9', replacement = 'ROT9P2',colnames(dat))
colnames(dat)
write_sav(dat,'N:/Users/gfraga/_Misc/ALINE/MasterAK_beh_erps.sav')
colnames(dat) <- gsub(pattern = 'peak_', replacement = '',colnames(dat))
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('original_MasterAK_beh_erp.sav')
colnames(dat) <- gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_LOT9', replacement = 'LOT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_ROT9', replacement = 'ROT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'peak_', replacement = '',colnames(dat))
write_sav(dat,'N:/Users/gfraga/_Misc/ALINE/MasterAK_beh_erps.sav')
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('original_MasterAK_beh_erp.sav')
colnames(dat) <- gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_LOT9', replacement = 'LOT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_ROT9', replacement = 'ROT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'peak_', replacement = '',colnames(dat))
write_sav(dat,'N:/Users/gfraga/_Misc/ALINE/MasterAK_beh_erps.sav')
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('original_MasterAK_beh_erp.sav')
colnames(dat) <- gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_LOT9', replacement = 'LOT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_ROT9', replacement = 'ROT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'peak_', replacement = '',colnames(dat))
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('MasterAK_beh_erp.sav')
colnames(dat) <- gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_LOT9', replacement = 'LOT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_ROT9', replacement = 'ROT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'peak_', replacement = '',colnames(dat))
clc
dev.off()
colnames(dat)
colnames(dat) <- gsub(pattern = 'latency_GFP_', replacement = 'latency_',colnames(dat))
colnames(dat)
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('MasterAK_beh_erp.sav')
colnames(dat) <- gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_LOT9', replacement = 'LOT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_ROT9', replacement = 'ROT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'ROT9P2', replacement = 'ROT9P2_P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'LOT9P2', replacement = 'LOT9P2_P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'peak_', replacement = '',colnames(dat))
colnames(dat) <- gsub(pattern = 'latency_GFP_', replacement = 'latency_',colnames(dat))
write_sav(dat,'N:/Users/gfraga/_Misc/ALINE/MasterAK_beh_erps.sav')
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('MasterAK_beh_erp.sav')
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('MasterAK_beh_erp.sav')
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('MasterAK_beh_erps.sav')
colnames(dat) <- gsub(pattern = 'LP_peak_latency', replacement = 'CEN6_LP_latency',colnames(dat))
colnames(dat) <- gsub(pattern = 'LPamp', replacement = 'LP_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2amp', replacement = 'P2_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'N1amp', replacement = 'N1_amp',colnames(dat))
colnames(dat) <- gsub(pattern = 'LP_LP_', replacement = 'CEN6_LP_',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_LOT9', replacement = 'LOT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'P2_ROT9', replacement = 'ROT9P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'ROT9P2', replacement = 'ROT9P2_P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'LOT9P2', replacement = 'LOT9P2_P2',colnames(dat))
colnames(dat) <- gsub(pattern = 'peak_', replacement = '',colnames(dat))
colnames(dat) <- gsub(pattern = 'latency_GFP_', replacement = 'latency_',colnames(dat))
colnames(dat)
setwd('N:/Users/gfraga/_Misc/ALINE')
dat <- read_sav('MasterAK_beh_erps.sav')
colnames(dat)
write_sav(dat,'N:/Users/gfraga/_Misc/ALINE/MasterAK_BEH_ERP.sav')
Audioseq  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
Audioseq
rm(list=ls(all=TRUE)) # remove all variables (!)
audioseq[[1]]  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq <- list()
audioseq[[1]]  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <- c(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <- c(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- c(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
audioseq
length(audioseq)
length(audioseq)
audioseq[[1]]
which(audioseq[[1]])==3
which(audioseq[[1]]==3)
which(audioseq[[1]]==3)
which(audioseq[[1]]==1)
which(audioseq[[1]]==1 || audioseq[[1]]==2)
which(audioseq[[1]]==1 | audioseq[[1]]==2)
seqVisual <- rep(0,length(audioseq[[1]]))
seqVisual
nreps <- 8
rep(1,nreps/2)
rep(1,nreps/2),rep(2,nreps/2)
c(rep(1,nreps/2),rep(2,nreps/2))
sample(c(rep(1,nreps/2),rep(2,nreps/2)))
seqvisual[which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
seqVisual <- rep(0,length(audioseq[[1]]))
seqVisual[which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
seqVisual <-
seqVisual
seqVisual <- rep(0,length(audioseq[[1]]))
seqVisual[which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
seqVisual[which(audioseq[[1]]==3 | audioseq[[1]]==4)] <- sample(c(rep(3,nreps/2),rep(4,nreps/2)))
seqVisual[which(audioseq[[1]]==5 | audioseq[[1]]==6)] <- sample(c(rep(5,nreps/2),rep(6,nreps/2)))
seqVisual
rbind(seqVisual,seqVisual)
rbind(seqVisual,audioseq[[1]])
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra","writexl")
lapply(Packages, require, character.only = TRUE)
#################################
diroutput<- "N:/studies/Grapholemo/Methods/Scripts/grapholemo/Experiment_NeurobsPresentation/sequence generators/"
audioseq <- list()
audioseq[[1]]  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <- c(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <- c(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- c(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
nreps <- 8
visualseq <- rep(0,length(audioseq[[1]]))
visualseq
visualseq[which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
visualseq[which(audioseq[[1]]==3 | audioseq[[1]]==4)] <- sample(c(rep(3,nreps/2),rep(4,nreps/2)))
visualseq[which(audioseq[[1]]==5 | audioseq[[1]]==6)] <- sample(c(rep(5,nreps/2),rep(6,nreps/2)))
visualseq
audioseq
visualseq
audioseq[[1]]
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra","writexl")
lapply(Packages, require, character.only = TRUE)
#################################
diroutput<- "N:/studies/Grapholemo/Methods/Scripts/grapholemo/Experiment_NeurobsPresentation/sequence generators/"
audioseq <- list()
audioseq[[1]]  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <- c(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <- c(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- c(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
nreps <- 8
visualseq <- list()
for (b in 1:length(audioseq)){
visualseq[[b]] <- rep(0,length(audioseq[[1]]))
visualseq[[b]][which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==3 | audioseq[[1]]==4)] <- sample(c(rep(3,nreps/2),rep(4,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==5 | audioseq[[1]]==6)] <- sample(c(rep(5,nreps/2),rep(6,nreps/2)))
}
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra","writexl")
lapply(Packages, require, character.only = TRUE)
#################################
diroutput<- "N:/studies/Grapholemo/Methods/Scripts/grapholemo/Experiment_NeurobsPresentation/sequence generators/"
audioseq <- list()
audioseq[[1]]  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <- c(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <- c(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- c(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
nreps <- 8
visualseq <- list()
for (b in 1:length(audioseq)){
visualseq[[b]] <- rep(0,length(audioseq[[1]]))
visualseq[[b]][which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==3 | audioseq[[1]]==4)] <- sample(c(rep(3,nreps/2),rep(4,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==5 | audioseq[[1]]==6)] <- sample(c(rep(5,nreps/2),rep(6,nreps/2)))
}
visualseq
audioseq
rbindlist(audioseq)
rbind(audioseq)
rbindlist(l, use.names="check", fill=FALSE, idcol=NULL)
rbindlist(visualseq, use.names="check", fill=FALSE, idcol=NULL)
rbindlist(visualseq)
abind::abind(visualseq)
rbind::abind(visualseq)
rbind::rbind(visualseq)
visualseq[[b]]
as.data.frame(visualseq[[b]])
bind_rows(audioseq)
dplyr::bind_rows(audioseq))
dplyr::bind_rows(audioseq)
dplyr::bind_rows(visualseq)
rlist::list.rbind
data.table::rbindlist(visualseq)
data.table::rbindlist(audioseq)
str(audioseq)
audioseq[[1]]  <- data.frame(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[1]]  <- data.frame(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <-data.frame(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <- data.frame(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- data.frame(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
rbindlist(audioseq)
as.matrix(rbindlist(audioseq))
as.numeric(rbindlist(audioseq))
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra","writexl")
lapply(Packages, require, character.only = TRUE)
#################################
diroutput<- "N:/studies/Grapholemo/Methods/Scripts/grapholemo/Experiment_NeurobsPresentation/sequence generators/"
audioseq <- list()
audioseq[[1]]  <- data.frame(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <-data.frame(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <- data.frame(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- data.frame(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
nreps <- 8
visualseq <- list()
for (b in 1:length(audioseq)){
visualseq[[b]] <- rep(0,length(audioseq[[1]]))
visualseq[[b]][which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==3 | audioseq[[1]]==4)] <- sample(c(rep(3,nreps/2),rep(4,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==5 | audioseq[[1]]==6)] <- sample(c(rep(5,nreps/2),rep(6,nreps/2)))
visualseq[[b]] <- as.data.frame(visualseq[[b]])
}
rbind(rbindlist(visualseq))
rbind(rbindlist(visualseq),rbindlist(audioseq))
audioseq
visualseq
audioseq
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra","writexl")
lapply(Packages, require, character.only = TRUE)
#################################
diroutput<- "N:/studies/Grapholemo/Methods/Scripts/grapholemo/Experiment_NeurobsPresentation/sequence generators/"
audioseq <- list()
audioseq[[1]]  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <-c(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <-c(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- c(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
nreps <- 8
visualseq <- list()
for (b in 1:length(audioseq)){
visualseq[[b]] <- rep(0,length(audioseq[[1]]))
visualseq[[b]][which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==3 | audioseq[[1]]==4)] <- sample(c(rep(3,nreps/2),rep(4,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==5 | audioseq[[1]]==6)] <- sample(c(rep(5,nreps/2),rep(6,nreps/2)))
}
c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
table(audioseq)
unlist(audioseq)
data.frame(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE))
matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE)
rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),matrix(unlist(audioseq), nrow=length(visualseq), byrow=TRUE)
)
rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),matrix(unlist(audioseq), nrow=length(visualseq), byrow=TRUE))
rbind(as.table(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),
as.table(unlist(audioseq), nrow=length(visualseq), byrow=TRUE))
rbind(as.data.frame(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),
as.data.frame(unlist(audioseq), nrow=length(visualseq), byrow=TRUE))
rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),
matrix(unlist(audioseq), nrow=length(visualseq), byrow=TRUE))
data.frame(rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),
matrix(unlist(audioseq), nrow=length(visualseq), byrow=TRUE)))
visualseq[[4]]
rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE)
matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE)
table<- data.frame(rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),
matrix(unlist(visualseq), nrow=length(visualseq), byrow=TRUE)))
table2save <- data.frame(rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),
matrix(unlist(visualseq), nrow=length(visualseq), byrow=TRUE)))
table2save
visualseq
table2save
names(table2save)
rownames(table2save)
colnames(table2save) <-c(1:length(table2save))
table2save
paste0('Audio',1:4)
paste0(paste0('Audio',1:4),paste0('Visual',1:4))
paste0(paste0('Audio',1:4),paste0('Visual',1:4))
c(paste0('Audio',1:4),paste0('Visual',1:4))
rownames(table2save) <- c(paste0('Audio',1:4),paste0('Visual',1:4))
table2save
# Save each sequence in one sheet
setwd(diroutput)
xlsx::write.xlsx(table2save,'Seqs_UVALEMO.xlsx',row.names = FALSE,append = TRUE)
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra","writexl")
lapply(Packages, require, character.only = TRUE)
#################################
diroutput<- "N:/studies/Grapholemo/Methods/Scripts/grapholemo/Experiment_NeurobsPresentation/FB_Learning sequence generators"
audioseq <- list()
audioseq[[1]]  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <-c(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <-c(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- c(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
nreps <- 8
visualseq <- list()
for (b in 1:length(audioseq)){
visualseq[[b]] <- rep(0,length(audioseq[[1]]))
visualseq[[b]][which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==3 | audioseq[[1]]==4)] <- sample(c(rep(3,nreps/2),rep(4,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==5 | audioseq[[1]]==6)] <- sample(c(rep(5,nreps/2),rep(6,nreps/2)))
}
table2save <- data.frame(rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),
matrix(unlist(visualseq), nrow=length(visualseq), byrow=TRUE)))
colnames(table2save) <-c(1:length(table2save))
rownames(table2save) <- c(paste0('Audio',1:4),paste0('Visual',1:4))
# Save each sequence in one sheet
setwd(diroutput)
xlsx::write.xlsx(table2save,'Seqs_UVALEMO.xlsx',row.names = FALSE,append = TRUE)
78/2
78/4
table2save
setwd()
getwd()
rm(list=ls(all=TRUE)) # remove all variables (!)
Packages <- c("readr", "data.table", "ggplot2","tibble","nlme","lme4","pwr","dplyr","cowplot","tidyr","psych","ggpubr","gridExtra","writexl")
lapply(Packages, require, character.only = TRUE)
#################################
diroutput<- "N:/studies/Grapholemo/Methods/Scripts/grapholemo/Experiment_NeurobsPresentation/FB_Learning sequence generators"
audioseq <- list()
audioseq[[1]]  <- c(3,6,2,1,5,2,5,4,1,3,5,4,2,4,3,4,6,3,1,6,1,3,5,4,6,1,6,1,4,1,6,5,3,4,6,2,5,3,2,3,2,5,2,1,5,2,4,6)
audioseq[[2]]  <-c(4,3,5,6,2,5,1,5,6,1,3,5,1,4,3,2,3,5,2,3,4,3,1,5,3,6,4,6,2,1,4,1,6,5,6,2,1,4,1,5,6,4,2,6,4,2,3,2)
audioseq[[3]]  <-c(3,1,5,3,1,6,4,5,2,3,5,1,2,3,4,6,3,5,4,6,1,6,3,4,5,3,5,6,1,2,6,1,3,2,4,2,1,4,5,4,6,2,4,2,1,2,5,6)
audioseq[[4]]  <- c(3,2,3,6,2,1,4,2,3,5,2,1,4,6,5,6,5,3,1,3,5,2,6,4,2,5,6,4,3,1,2,1,5,1,6,4,6,5,4,5,3,1,4,1,4,6,3,2)
nreps <- 8
visualseq <- list()
for (b in 1:length(audioseq)){
visualseq[[b]] <- rep(0,length(audioseq[[1]]))
visualseq[[b]][which(audioseq[[1]]==1 | audioseq[[1]]==2)] <- sample(c(rep(1,nreps/2),rep(2,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==3 | audioseq[[1]]==4)] <- sample(c(rep(3,nreps/2),rep(4,nreps/2)))
visualseq[[b]][which(audioseq[[1]]==5 | audioseq[[1]]==6)] <- sample(c(rep(5,nreps/2),rep(6,nreps/2)))
}
table2save <- data.frame(rbind(matrix(unlist(audioseq), nrow=length(audioseq), byrow=TRUE),
matrix(unlist(visualseq), nrow=length(visualseq), byrow=TRUE)))
colnames(table2save) <-c(1:length(table2save))
rownames(table2save) <- c(paste0('Audio',1:4),paste0('Visual',1:4))
table2save
xlsx::write.xlsx(table2save,'Seqs_UVALEMO.xlsx',row.names = TRUE,append = TRUE)
xlsx::write.xlsx(table2save,'Seqs_UVALEMO.xlsx',row.names = TRUE)
c(rep(1,nreps/2),rep(2,nreps/2))
sample(c(rep(1,nreps/2),rep(2,nreps/2)))
